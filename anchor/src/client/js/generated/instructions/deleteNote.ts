/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { NOTESDAPP_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const DELETE_NOTE_DISCRIMINATOR = new Uint8Array([
  182, 211, 115, 229, 163, 88, 108, 217,
]);

export function getDeleteNoteDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(DELETE_NOTE_DISCRIMINATOR);
}

export type DeleteNoteInstruction<
  TProgram extends string = typeof NOTESDAPP_PROGRAM_ADDRESS,
  TAccountAuthor extends string | AccountMeta<string> = string,
  TAccountNote extends string | AccountMeta<string> = string,
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountAuthor extends string
        ? WritableSignerAccount<TAccountAuthor> &
            AccountSignerMeta<TAccountAuthor>
        : TAccountAuthor,
      TAccountNote extends string
        ? WritableAccount<TAccountNote>
        : TAccountNote,
      ...TRemainingAccounts,
    ]
  >;

export type DeleteNoteInstructionData = {
  discriminator: ReadonlyUint8Array;
  title: string;
};

export type DeleteNoteInstructionDataArgs = { title: string };

export function getDeleteNoteInstructionDataEncoder(): Encoder<DeleteNoteInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['title', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ]),
    (value) => ({ ...value, discriminator: DELETE_NOTE_DISCRIMINATOR })
  );
}

export function getDeleteNoteInstructionDataDecoder(): Decoder<DeleteNoteInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['title', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
  ]);
}

export function getDeleteNoteInstructionDataCodec(): Codec<
  DeleteNoteInstructionDataArgs,
  DeleteNoteInstructionData
> {
  return combineCodec(
    getDeleteNoteInstructionDataEncoder(),
    getDeleteNoteInstructionDataDecoder()
  );
}

export type DeleteNoteAsyncInput<
  TAccountAuthor extends string = string,
  TAccountNote extends string = string,
> = {
  author: TransactionSigner<TAccountAuthor>;
  note?: Address<TAccountNote>;
  title: DeleteNoteInstructionDataArgs['title'];
};

export async function getDeleteNoteInstructionAsync<
  TAccountAuthor extends string,
  TAccountNote extends string,
  TProgramAddress extends Address = typeof NOTESDAPP_PROGRAM_ADDRESS,
>(
  input: DeleteNoteAsyncInput<TAccountAuthor, TAccountNote>,
  config?: { programAddress?: TProgramAddress }
): Promise<
  DeleteNoteInstruction<TProgramAddress, TAccountAuthor, TAccountNote>
> {
  // Program address.
  const programAddress = config?.programAddress ?? NOTESDAPP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    author: { value: input.author ?? null, isWritable: true },
    note: { value: input.note ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.note.value) {
    accounts.note.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([110, 111, 116, 101])),
        getAddressEncoder().encode(expectAddress(accounts.author.value)),
        addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()).encode(
          expectSome(args.title)
        ),
      ],
    });
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [getAccountMeta(accounts.author), getAccountMeta(accounts.note)],
    data: getDeleteNoteInstructionDataEncoder().encode(
      args as DeleteNoteInstructionDataArgs
    ),
    programAddress,
  } as DeleteNoteInstruction<TProgramAddress, TAccountAuthor, TAccountNote>);
}

export type DeleteNoteInput<
  TAccountAuthor extends string = string,
  TAccountNote extends string = string,
> = {
  author: TransactionSigner<TAccountAuthor>;
  note: Address<TAccountNote>;
  title: DeleteNoteInstructionDataArgs['title'];
};

export function getDeleteNoteInstruction<
  TAccountAuthor extends string,
  TAccountNote extends string,
  TProgramAddress extends Address = typeof NOTESDAPP_PROGRAM_ADDRESS,
>(
  input: DeleteNoteInput<TAccountAuthor, TAccountNote>,
  config?: { programAddress?: TProgramAddress }
): DeleteNoteInstruction<TProgramAddress, TAccountAuthor, TAccountNote> {
  // Program address.
  const programAddress = config?.programAddress ?? NOTESDAPP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    author: { value: input.author ?? null, isWritable: true },
    note: { value: input.note ?? null, isWritable: true },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [getAccountMeta(accounts.author), getAccountMeta(accounts.note)],
    data: getDeleteNoteInstructionDataEncoder().encode(
      args as DeleteNoteInstructionDataArgs
    ),
    programAddress,
  } as DeleteNoteInstruction<TProgramAddress, TAccountAuthor, TAccountNote>);
}

export type ParsedDeleteNoteInstruction<
  TProgram extends string = typeof NOTESDAPP_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    author: TAccountMetas[0];
    note: TAccountMetas[1];
  };
  data: DeleteNoteInstructionData;
};

export function parseDeleteNoteInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedDeleteNoteInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 2) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: { author: getNextAccount(), note: getNextAccount() },
    data: getDeleteNoteInstructionDataDecoder().decode(instruction.data),
  };
}

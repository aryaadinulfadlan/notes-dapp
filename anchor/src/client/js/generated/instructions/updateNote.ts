/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  combineCodec,
  fixDecoderSize,
  fixEncoderSize,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getProgramDerivedAddress,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type AccountMeta,
  type AccountSignerMeta,
  type Address,
  type Codec,
  type Decoder,
  type Encoder,
  type Instruction,
  type InstructionWithAccounts,
  type InstructionWithData,
  type ReadonlyAccount,
  type ReadonlyUint8Array,
  type TransactionSigner,
  type WritableAccount,
  type WritableSignerAccount,
} from 'gill';
import { NOTESDAPP_PROGRAM_ADDRESS } from '../programs';
import {
  expectAddress,
  expectSome,
  getAccountMetaFactory,
  type ResolvedAccount,
} from '../shared';

export const UPDATE_NOTE_DISCRIMINATOR = new Uint8Array([
  103, 129, 251, 34, 33, 154, 210, 148,
]);

export function getUpdateNoteDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(UPDATE_NOTE_DISCRIMINATOR);
}

export type UpdateNoteInstruction<
  TProgram extends string = typeof NOTESDAPP_PROGRAM_ADDRESS,
  TAccountAuthor extends string | AccountMeta<string> = string,
  TAccountNote extends string | AccountMeta<string> = string,
  TAccountSystemProgram extends
    | string
    | AccountMeta<string> = '11111111111111111111111111111111',
  TRemainingAccounts extends readonly AccountMeta<string>[] = [],
> = Instruction<TProgram> &
  InstructionWithData<ReadonlyUint8Array> &
  InstructionWithAccounts<
    [
      TAccountAuthor extends string
        ? WritableSignerAccount<TAccountAuthor> &
            AccountSignerMeta<TAccountAuthor>
        : TAccountAuthor,
      TAccountNote extends string
        ? WritableAccount<TAccountNote>
        : TAccountNote,
      TAccountSystemProgram extends string
        ? ReadonlyAccount<TAccountSystemProgram>
        : TAccountSystemProgram,
      ...TRemainingAccounts,
    ]
  >;

export type UpdateNoteInstructionData = {
  discriminator: ReadonlyUint8Array;
  title: string;
  content: string;
};

export type UpdateNoteInstructionDataArgs = { title: string; content: string };

export function getUpdateNoteInstructionDataEncoder(): Encoder<UpdateNoteInstructionDataArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['title', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['content', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
    ]),
    (value) => ({ ...value, discriminator: UPDATE_NOTE_DISCRIMINATOR })
  );
}

export function getUpdateNoteInstructionDataDecoder(): Decoder<UpdateNoteInstructionData> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['title', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['content', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
  ]);
}

export function getUpdateNoteInstructionDataCodec(): Codec<
  UpdateNoteInstructionDataArgs,
  UpdateNoteInstructionData
> {
  return combineCodec(
    getUpdateNoteInstructionDataEncoder(),
    getUpdateNoteInstructionDataDecoder()
  );
}

export type UpdateNoteAsyncInput<
  TAccountAuthor extends string = string,
  TAccountNote extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  author: TransactionSigner<TAccountAuthor>;
  note?: Address<TAccountNote>;
  systemProgram?: Address<TAccountSystemProgram>;
  title: UpdateNoteInstructionDataArgs['title'];
  content: UpdateNoteInstructionDataArgs['content'];
};

export async function getUpdateNoteInstructionAsync<
  TAccountAuthor extends string,
  TAccountNote extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof NOTESDAPP_PROGRAM_ADDRESS,
>(
  input: UpdateNoteAsyncInput<
    TAccountAuthor,
    TAccountNote,
    TAccountSystemProgram
  >,
  config?: { programAddress?: TProgramAddress }
): Promise<
  UpdateNoteInstruction<
    TProgramAddress,
    TAccountAuthor,
    TAccountNote,
    TAccountSystemProgram
  >
> {
  // Program address.
  const programAddress = config?.programAddress ?? NOTESDAPP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    author: { value: input.author ?? null, isWritable: true },
    note: { value: input.note ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.note.value) {
    accounts.note.value = await getProgramDerivedAddress({
      programAddress,
      seeds: [
        getBytesEncoder().encode(new Uint8Array([110, 111, 116, 101])),
        getAddressEncoder().encode(expectAddress(accounts.author.value)),
        addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder()).encode(
          expectSome(args.title)
        ),
      ],
    });
  }
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.author),
      getAccountMeta(accounts.note),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getUpdateNoteInstructionDataEncoder().encode(
      args as UpdateNoteInstructionDataArgs
    ),
    programAddress,
  } as UpdateNoteInstruction<
    TProgramAddress,
    TAccountAuthor,
    TAccountNote,
    TAccountSystemProgram
  >);
}

export type UpdateNoteInput<
  TAccountAuthor extends string = string,
  TAccountNote extends string = string,
  TAccountSystemProgram extends string = string,
> = {
  author: TransactionSigner<TAccountAuthor>;
  note: Address<TAccountNote>;
  systemProgram?: Address<TAccountSystemProgram>;
  title: UpdateNoteInstructionDataArgs['title'];
  content: UpdateNoteInstructionDataArgs['content'];
};

export function getUpdateNoteInstruction<
  TAccountAuthor extends string,
  TAccountNote extends string,
  TAccountSystemProgram extends string,
  TProgramAddress extends Address = typeof NOTESDAPP_PROGRAM_ADDRESS,
>(
  input: UpdateNoteInput<TAccountAuthor, TAccountNote, TAccountSystemProgram>,
  config?: { programAddress?: TProgramAddress }
): UpdateNoteInstruction<
  TProgramAddress,
  TAccountAuthor,
  TAccountNote,
  TAccountSystemProgram
> {
  // Program address.
  const programAddress = config?.programAddress ?? NOTESDAPP_PROGRAM_ADDRESS;

  // Original accounts.
  const originalAccounts = {
    author: { value: input.author ?? null, isWritable: true },
    note: { value: input.note ?? null, isWritable: true },
    systemProgram: { value: input.systemProgram ?? null, isWritable: false },
  };
  const accounts = originalAccounts as Record<
    keyof typeof originalAccounts,
    ResolvedAccount
  >;

  // Original args.
  const args = { ...input };

  // Resolve default values.
  if (!accounts.systemProgram.value) {
    accounts.systemProgram.value =
      '11111111111111111111111111111111' as Address<'11111111111111111111111111111111'>;
  }

  const getAccountMeta = getAccountMetaFactory(programAddress, 'programId');
  return Object.freeze({
    accounts: [
      getAccountMeta(accounts.author),
      getAccountMeta(accounts.note),
      getAccountMeta(accounts.systemProgram),
    ],
    data: getUpdateNoteInstructionDataEncoder().encode(
      args as UpdateNoteInstructionDataArgs
    ),
    programAddress,
  } as UpdateNoteInstruction<
    TProgramAddress,
    TAccountAuthor,
    TAccountNote,
    TAccountSystemProgram
  >);
}

export type ParsedUpdateNoteInstruction<
  TProgram extends string = typeof NOTESDAPP_PROGRAM_ADDRESS,
  TAccountMetas extends readonly AccountMeta[] = readonly AccountMeta[],
> = {
  programAddress: Address<TProgram>;
  accounts: {
    author: TAccountMetas[0];
    note: TAccountMetas[1];
    systemProgram: TAccountMetas[2];
  };
  data: UpdateNoteInstructionData;
};

export function parseUpdateNoteInstruction<
  TProgram extends string,
  TAccountMetas extends readonly AccountMeta[],
>(
  instruction: Instruction<TProgram> &
    InstructionWithAccounts<TAccountMetas> &
    InstructionWithData<ReadonlyUint8Array>
): ParsedUpdateNoteInstruction<TProgram, TAccountMetas> {
  if (instruction.accounts.length < 3) {
    // TODO: Coded error.
    throw new Error('Not enough accounts');
  }
  let accountIndex = 0;
  const getNextAccount = () => {
    const accountMeta = (instruction.accounts as TAccountMetas)[accountIndex]!;
    accountIndex += 1;
    return accountMeta;
  };
  return {
    programAddress: instruction.programAddress,
    accounts: {
      author: getNextAccount(),
      note: getNextAccount(),
      systemProgram: getNextAccount(),
    },
    data: getUpdateNoteInstructionDataDecoder().decode(instruction.data),
  };
}

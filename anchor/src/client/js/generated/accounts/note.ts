/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  addDecoderSizePrefix,
  addEncoderSizePrefix,
  assertAccountExists,
  assertAccountsExist,
  combineCodec,
  decodeAccount,
  fetchEncodedAccount,
  fetchEncodedAccounts,
  fixDecoderSize,
  fixEncoderSize,
  getAddressDecoder,
  getAddressEncoder,
  getBytesDecoder,
  getBytesEncoder,
  getI64Decoder,
  getI64Encoder,
  getStructDecoder,
  getStructEncoder,
  getU32Decoder,
  getU32Encoder,
  getUtf8Decoder,
  getUtf8Encoder,
  transformEncoder,
  type Account,
  type Address,
  type Codec,
  type Decoder,
  type EncodedAccount,
  type Encoder,
  type FetchAccountConfig,
  type FetchAccountsConfig,
  type MaybeAccount,
  type MaybeEncodedAccount,
  type ReadonlyUint8Array,
} from 'gill';

export const NOTE_DISCRIMINATOR = new Uint8Array([
  203, 75, 252, 196, 81, 210, 122, 126,
]);

export function getNoteDiscriminatorBytes() {
  return fixEncoderSize(getBytesEncoder(), 8).encode(NOTE_DISCRIMINATOR);
}

export type Note = {
  discriminator: ReadonlyUint8Array;
  author: Address;
  title: string;
  content: string;
  createdAt: bigint;
  updatedAt: bigint;
};

export type NoteArgs = {
  author: Address;
  title: string;
  content: string;
  createdAt: number | bigint;
  updatedAt: number | bigint;
};

export function getNoteEncoder(): Encoder<NoteArgs> {
  return transformEncoder(
    getStructEncoder([
      ['discriminator', fixEncoderSize(getBytesEncoder(), 8)],
      ['author', getAddressEncoder()],
      ['title', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['content', addEncoderSizePrefix(getUtf8Encoder(), getU32Encoder())],
      ['createdAt', getI64Encoder()],
      ['updatedAt', getI64Encoder()],
    ]),
    (value) => ({ ...value, discriminator: NOTE_DISCRIMINATOR })
  );
}

export function getNoteDecoder(): Decoder<Note> {
  return getStructDecoder([
    ['discriminator', fixDecoderSize(getBytesDecoder(), 8)],
    ['author', getAddressDecoder()],
    ['title', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['content', addDecoderSizePrefix(getUtf8Decoder(), getU32Decoder())],
    ['createdAt', getI64Decoder()],
    ['updatedAt', getI64Decoder()],
  ]);
}

export function getNoteCodec(): Codec<NoteArgs, Note> {
  return combineCodec(getNoteEncoder(), getNoteDecoder());
}

export function decodeNote<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress>
): Account<Note, TAddress>;
export function decodeNote<TAddress extends string = string>(
  encodedAccount: MaybeEncodedAccount<TAddress>
): MaybeAccount<Note, TAddress>;
export function decodeNote<TAddress extends string = string>(
  encodedAccount: EncodedAccount<TAddress> | MaybeEncodedAccount<TAddress>
): Account<Note, TAddress> | MaybeAccount<Note, TAddress> {
  return decodeAccount(
    encodedAccount as MaybeEncodedAccount<TAddress>,
    getNoteDecoder()
  );
}

export async function fetchNote<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<Account<Note, TAddress>> {
  const maybeAccount = await fetchMaybeNote(rpc, address, config);
  assertAccountExists(maybeAccount);
  return maybeAccount;
}

export async function fetchMaybeNote<TAddress extends string = string>(
  rpc: Parameters<typeof fetchEncodedAccount>[0],
  address: Address<TAddress>,
  config?: FetchAccountConfig
): Promise<MaybeAccount<Note, TAddress>> {
  const maybeAccount = await fetchEncodedAccount(rpc, address, config);
  return decodeNote(maybeAccount);
}

export async function fetchAllNote(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<Account<Note>[]> {
  const maybeAccounts = await fetchAllMaybeNote(rpc, addresses, config);
  assertAccountsExist(maybeAccounts);
  return maybeAccounts;
}

export async function fetchAllMaybeNote(
  rpc: Parameters<typeof fetchEncodedAccounts>[0],
  addresses: Array<Address>,
  config?: FetchAccountsConfig
): Promise<MaybeAccount<Note>[]> {
  const maybeAccounts = await fetchEncodedAccounts(rpc, addresses, config);
  return maybeAccounts.map((maybeAccount) => decodeNote(maybeAccount));
}

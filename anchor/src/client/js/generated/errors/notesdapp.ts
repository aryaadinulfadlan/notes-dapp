/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  isProgramError,
  type Address,
  type SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM,
  type SolanaError,
} from 'gill';
import { NOTESDAPP_PROGRAM_ADDRESS } from '../programs';

/** TitleTooLong: Title cannot be longer than 20 chars */
export const NOTESDAPP_ERROR__TITLE_TOO_LONG = 0x1770; // 6000
/** ContentTooLong: Content cannot be longer than 100 chars */
export const NOTESDAPP_ERROR__CONTENT_TOO_LONG = 0x1771; // 6001
/** TitleEmpty: Title cannot be empty */
export const NOTESDAPP_ERROR__TITLE_EMPTY = 0x1772; // 6002
/** ContentEmpty: Content cannot be empty */
export const NOTESDAPP_ERROR__CONTENT_EMPTY = 0x1773; // 6003
/** Unauthorized: Unauthorized */
export const NOTESDAPP_ERROR__UNAUTHORIZED = 0x1774; // 6004

export type NotesdappError =
  | typeof NOTESDAPP_ERROR__CONTENT_EMPTY
  | typeof NOTESDAPP_ERROR__CONTENT_TOO_LONG
  | typeof NOTESDAPP_ERROR__TITLE_EMPTY
  | typeof NOTESDAPP_ERROR__TITLE_TOO_LONG
  | typeof NOTESDAPP_ERROR__UNAUTHORIZED;

let notesdappErrorMessages: Record<NotesdappError, string> | undefined;
if (process.env.NODE_ENV !== 'production') {
  notesdappErrorMessages = {
    [NOTESDAPP_ERROR__CONTENT_EMPTY]: `Content cannot be empty`,
    [NOTESDAPP_ERROR__CONTENT_TOO_LONG]: `Content cannot be longer than 100 chars`,
    [NOTESDAPP_ERROR__TITLE_EMPTY]: `Title cannot be empty`,
    [NOTESDAPP_ERROR__TITLE_TOO_LONG]: `Title cannot be longer than 20 chars`,
    [NOTESDAPP_ERROR__UNAUTHORIZED]: `Unauthorized`,
  };
}

export function getNotesdappErrorMessage(code: NotesdappError): string {
  if (process.env.NODE_ENV !== 'production') {
    return (notesdappErrorMessages as Record<NotesdappError, string>)[code];
  }

  return 'Error message not available in production bundles.';
}

export function isNotesdappError<TProgramErrorCode extends NotesdappError>(
  error: unknown,
  transactionMessage: {
    instructions: Record<number, { programAddress: Address }>;
  },
  code?: TProgramErrorCode
): error is SolanaError<typeof SOLANA_ERROR__INSTRUCTION_ERROR__CUSTOM> &
  Readonly<{ context: Readonly<{ code: TProgramErrorCode }> }> {
  return isProgramError<TProgramErrorCode>(
    error,
    transactionMessage,
    NOTESDAPP_PROGRAM_ADDRESS,
    code
  );
}

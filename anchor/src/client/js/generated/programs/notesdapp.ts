/**
 * This code was AUTOGENERATED using the Codama library.
 * Please DO NOT EDIT THIS FILE, instead use visitors
 * to add features, then rerun Codama to update it.
 *
 * @see https://github.com/codama-idl/codama
 */

import {
  containsBytes,
  fixEncoderSize,
  getBytesEncoder,
  type Address,
  type ReadonlyUint8Array,
} from 'gill';
import {
  type ParsedCreateNoteInstruction,
  type ParsedDeleteNoteInstruction,
  type ParsedUpdateNoteInstruction,
} from '../instructions';

export const NOTESDAPP_PROGRAM_ADDRESS =
  'DWwD3X6V5QwGEpktGQSrhKU2JVKiwp8vX6ztZj3BGkxT' as Address<'DWwD3X6V5QwGEpktGQSrhKU2JVKiwp8vX6ztZj3BGkxT'>;

export enum NotesdappAccount {
  Note,
}

export function identifyNotesdappAccount(
  account: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): NotesdappAccount {
  const data = 'data' in account ? account.data : account;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([203, 75, 252, 196, 81, 210, 122, 126])
      ),
      0
    )
  ) {
    return NotesdappAccount.Note;
  }
  throw new Error(
    'The provided account could not be identified as a notesdapp account.'
  );
}

export enum NotesdappInstruction {
  CreateNote,
  DeleteNote,
  UpdateNote,
}

export function identifyNotesdappInstruction(
  instruction: { data: ReadonlyUint8Array } | ReadonlyUint8Array
): NotesdappInstruction {
  const data = 'data' in instruction ? instruction.data : instruction;
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([103, 2, 208, 242, 86, 156, 151, 107])
      ),
      0
    )
  ) {
    return NotesdappInstruction.CreateNote;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([182, 211, 115, 229, 163, 88, 108, 217])
      ),
      0
    )
  ) {
    return NotesdappInstruction.DeleteNote;
  }
  if (
    containsBytes(
      data,
      fixEncoderSize(getBytesEncoder(), 8).encode(
        new Uint8Array([103, 129, 251, 34, 33, 154, 210, 148])
      ),
      0
    )
  ) {
    return NotesdappInstruction.UpdateNote;
  }
  throw new Error(
    'The provided instruction could not be identified as a notesdapp instruction.'
  );
}

export type ParsedNotesdappInstruction<
  TProgram extends string = 'DWwD3X6V5QwGEpktGQSrhKU2JVKiwp8vX6ztZj3BGkxT',
> =
  | ({
      instructionType: NotesdappInstruction.CreateNote;
    } & ParsedCreateNoteInstruction<TProgram>)
  | ({
      instructionType: NotesdappInstruction.DeleteNote;
    } & ParsedDeleteNoteInstruction<TProgram>)
  | ({
      instructionType: NotesdappInstruction.UpdateNote;
    } & ParsedUpdateNoteInstruction<TProgram>);
